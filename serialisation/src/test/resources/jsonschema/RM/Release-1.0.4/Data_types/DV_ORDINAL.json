{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.4/Data_types/DV_ORDINAL.json",
  "title": "DV_ORDINAL",
  "description": "Models rankings and scores, e.g. pain, Apgar values, etc, where there is \n\na) implied ordering, \nb) no implication that the distance between each value is constant, and \nc) the total number of values is finite. \n\nNote that although the term  ordinal' in mathematics means natural numbers only, here any integer is allowed, since negative and zero values are often used by medical professionals for values around a neutral point. Examples of sets of ordinal values: \n\n*   -3, -2, -1, 0, 1, 2, 3  -- reflex response values \n*    0, 1, 2                  -- Apgar values \n\nThis class is used for recording any clinical datum which is customarily recorded using symbolic values. Example: the results on a urinalysis strip, e.g. `{neg, trace, +, ++, +++}` are used for leucocytes, protein, nitrites etc; for non-haemolysed blood `{neg, trace, moderate}`; for haemolysed blood `{small, moderate, large}`. ",
  "$comments": "Defined in Data_types IM, inherits from DV_ORDERED",
  "type": "object",
  "properties": {
    "normal_status": {
      "description": "Optional normal status indicator of value with respect to normal range for this value. Often included by lab, even if the normal range itself is not included. Coded by ordinals in series HHH, HH, H, (nothing), L, LL, LLL; see openEHR terminology group  `normal_status`. ",
      "$ref": "all.json#/definitions/CODE_PHRASE"
    },
    "normal_range": {
      "description": "Optional normal range. ",
      "$ref": "all.json#/definitions/DV_INTERVAL"
    },
    "other_reference_ranges": {
      "description": "Optional tagged other reference ranges for this value in its particular measurement context.",
      "type": "array",
      "items": {
        "$ref": "all.json#/definitions/REFERENCE_RANGE"
      }
    },
    "symbol": {
      "description": "Coded textual representation of this value in the enumeration, which may be strings made from  +  symbols, or other enumerations of terms such as  mild ,  moderate ,  severe , or even the same number series as the values, e.g.  1 ,  2 ,  3 . Codes come from archetype. ",
      "$ref": "all.json#/definitions/DV_CODED_TEXT"
    },
    "value": {
      "description": "Value in ordered enumeration of values. Any integer value can be used. \n",
      "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Integer"
    }
  },
  "required": [
    "symbol",
    "value"
  ],
  "$inherits": [
    "all.json#/definitions/DV_ORDERED"
  ],
  "$functions": {
    "infix <": {
      "parameters": {
        "other": {
          "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Ordered"
        }
      },
      "required_parameters": [
        "other"
      ],
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "is_strictly_comparable_to": {
      "parameters": {
        "other": {
          "$ref": "all.json#/definitions/DV_ORDERED"
        }
      },
      "required_parameters": [
        "other"
      ],
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "is_simple": {
      "description": "True if this quantity has no reference ranges.",
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "is_normal": {
      "description": "Value is in the normal range, determined by comparison of the value to the normal_range if present, or by the normal_status marker if present. \n",
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "limits": {
      "description": "\nLimits of the ordinal enumeration, to allow comparison of an ordinal \nvalue to its limits. \n",
      "return": {
        "$ref": "all.json#/definitions/DV_ORDINAL"
      }
    },
    "<": {
      "parameters": {
        "other": {
          "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Ordered"
        }
      },
      "required_parameters": [
        "other"
      ],
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    }
  },
  "$invariants": {
    "Other_reference_ranges_validity": "other_reference_ranges /= Void implies not other_reference_ranges.is_empty",
    "Is_simple_validity": "(normal_range = Void and other_reference_ranges = Void) implies is_simple",
    "Normal_status_validity": "normal_status /= Void implies code_set (Code_set_id_normal_statuses).has_code (normal_status)",
    "Normal_range_and_status_consistency": "(normal_range /= Void and normal_status /= Void) implies (normal_status.code_string.is_equal (\u201cN\u201d) xor not normal_range.has (self))",
    "Pre": "normal_range /= Void or normal_status /= Void",
    "Post_range": "normal_range /= Void implies Result = normal_range.has (self)",
    "Post_status": "normal_status /= Void implies normal_status.code_string.is_equal (\u201cN\u201d)",
    "Limits_valid": "limits.meaning.is_equal (\u201climits\u201d)",
    "Reference_range_valid": "other_reference_ranges.has (limits)",
    "Post": "Result = value < other.value"
  }
}