{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.4/Data_types/DV_AMOUNT.json",
  "title": "DV_AMOUNT",
  "description": "Abstract class defining the concept of relative quantified  'amounts'. For relative quantities, the  `+` and  `-` operators are defined (unlike descendants of `DV_ABSOLUTE_QUANTITY`, such as the date/time types). \n",
  "$comments": "Defined in Data_types IM, abstract, inherits from DV_QUANTIFIED",
  "type": "object",
  "properties": {
    "_type": {
      "enum": [
        "DV_PROPORTION",
        "DV_QUANTITY",
        "DV_COUNT",
        "DV_DURATION"
      ]
    },
    "normal_status": {
      "description": "Optional normal status indicator of value with respect to normal range for this value. Often included by lab, even if the normal range itself is not included. Coded by ordinals in series HHH, HH, H, (nothing), L, LL, LLL; see openEHR terminology group  `normal_status`. ",
      "$ref": "all.json#/definitions/CODE_PHRASE"
    },
    "normal_range": {
      "description": "Optional normal range. ",
      "$ref": "all.json#/definitions/DV_INTERVAL"
    },
    "other_reference_ranges": {
      "description": "Optional tagged other reference ranges for this value in its particular measurement context.",
      "type": "array",
      "items": {
        "$ref": "all.json#/definitions/REFERENCE_RANGE"
      }
    },
    "magnitude_status": {
      "description": "Optional status of magnitude with values: \n\n* `\"=\"`   :   magnitude is a point value \n* `\"<\"`   :   value is < magnitude \n* `\">\"`   :   value is > magnitude \n* `\"<=\"` : value is <= magnitude \n* `\">=\"` : value is >= magnitude \n* `\"~\"`   :   value is approximately magnitude \n\nIf not present, assumed meaning is  `\"=\"` . \n",
      "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/String"
    },
    "accuracy": {
      "description": "Accuracy of measurement, expressed either as a half-range percent value (`_accuracy_is_percent_` = `True`) or a half-range quantity. A value of `0` means that accuracy is 100%, i.e. no error.\n\nA value of `_unknown_accuracy_value_` means that accuracy was not recorded.",
      "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Real"
    },
    "accuracy_is_percent": {
      "description": "If `True`, indicates that when this object was created, accuracy was recorded as a percent value; if `False`, as an absolute quantity value.",
      "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
    }
  },
  "required": [
    "_type"
  ],
  "$abstract": true,
  "$inherits": [
    "all.json#/definitions/DV_QUANTIFIED"
  ],
  "$children": [
    "all.json#/definitions/DV_PROPORTION",
    "all.json#/definitions/DV_QUANTITY",
    "all.json#/definitions/DV_COUNT",
    "all.json#/definitions/DV_DURATION"
  ],
  "$functions": {
    "infix <": {
      "parameters": {
        "other": {
          "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Ordered"
        }
      },
      "required_parameters": [
        "other"
      ],
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "is_strictly_comparable_to": {
      "description": "Test if two instances are strictly comparable.",
      "parameters": {
        "other": {
          "$ref": "all.json#/definitions/DV_ORDERED"
        }
      },
      "required_parameters": [
        "other"
      ],
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "is_simple": {
      "description": "True if this quantity has no reference ranges.",
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "is_normal": {
      "description": "Value is in the normal range, determined by comparison of the value to the normal_range if present, or by the normal_status marker if present. \n",
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "valid_magnitude_status": {
      "description": "Test whether a string value is one of the valid values for the magnitude_status attribute. ",
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "magnitude": {
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Ordered_Numeric"
      }
    },
    "accuracy_unknown": {
      "description": "True if accuracy is not known, e.g. due to not being recorded or discernable.",
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "valid_percentage": {
      "description": "Test whether a number is a valid percentage, i.e. between 0 and 100. ",
      "parameters": {
        "number": {
          "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Ordered_Numeric"
        }
      },
      "required_parameters": [
        "number"
      ],
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "infix =": {
      "parameters": {
        "source": {
          "$ref": "all.json#/definitions/DV_AMOUNT"
        }
      },
      "required_parameters": [
        "source"
      ],
      "return": {
        "$ref": "all.json#/definitions/DV_AMOUNT"
      }
    },
    "infix +": {
      "description": "Sum of this quantity and another whose formal type must be the difference type of this quantity. The value of accuracy in the result is either:\n\n* the sum of the accuracies of the operands, if both present, or;\n* both operand accuracies are unknown_accuracy_value.\n\nIf the accuracy value is a percentage in one operand and not in the other, the form in the result is that of the larger operand.",
      "parameters": {
        "other": {
          "$ref": "all.json#/definitions/DV_AMOUNT"
        }
      },
      "required_parameters": [
        "other"
      ],
      "return": {
        "$ref": "all.json#/definitions/DV_AMOUNT"
      }
    },
    "infix -": {
      "description": "Negated version of current object, such as used for representing a difference, e.g. a weight loss.\n\nThe value of accuracy in the result is either:\n\n* the sum of the accuracies of the operands, if both present, or;\n* unknown, if either or both operand accuracies are unknown.\n\nIf the accuracy value is a percentage in one operand and not in the other, the form in the result is that of the larger operand.",
      "parameters": {
        "other": {
          "$ref": "all.json#/definitions/DV_AMOUNT"
        }
      },
      "required_parameters": [
        "other"
      ],
      "return": {
        "$ref": "all.json#/definitions/DV_AMOUNT"
      }
    },
    "prefix -": {
      "description": "Negated version of current object, such as used for representing a difference, e.g. a weight loss.",
      "return": {
        "$ref": "all.json#/definitions/DV_AMOUNT"
      }
    }
  },
  "$invariants": {
    "Other_reference_ranges_validity": "other_reference_ranges /= Void implies not other_reference_ranges.is_empty",
    "Is_simple_validity": "(normal_range = Void and other_reference_ranges = Void) implies is_simple",
    "Normal_status_validity": "normal_status /= Void implies code_set (Code_set_id_normal_statuses).has_code (normal_status)",
    "Normal_range_and_status_consistency": "(normal_range /= Void and normal_status /= Void) implies (normal_status.code_string.is_equal (\u201cN\u201d) xor not normal_range.has (self))",
    "Pre": "normal_range /= Void or normal_status /= Void",
    "Post_range": "normal_range /= Void implies Result = normal_range.has (self)",
    "Post_status": "normal_status /= Void implies normal_status.code_string.is_equal (\u201cN\u201d)",
    "Magnitude_status_valid": "magnitude_status /= Void implies valid_magnitude_status (magnitude_status)",
    "Post": "Result = s.is_equal (\u201c=\u201d) or s.is_equal (\u201c<\u201d) or s.is_equal (\u201c>\u201d) or s.is_equal (\u201c<=\u201d) or s.is_equal (\u201c>=\u201d) or s.is_equal (\u201c~\u201d)",
    "Accuracy_is_percent_validity": "accuracy = 0 implies not accuracy_is_percent",
    "Accuracy_validity": "accuracy_is_percent implies valid_percentage (accuracy)"
  }
}