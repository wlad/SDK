{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Base_types/VERSION_TREE_ID.json",
  "title": "VERSION_TREE_ID",
  "description": "Version tree identifier for one version. Lexical form: \n\n`trunk_version [  '.' branch_number  '.' branch_version ]`",
  "$comments": "Defined in Base_types IM",
  "type": "object",
  "properties": {
    "value": {
      "description": "String form of this identifier.",
      "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/String"
    }
  },
  "required": [
    "value"
  ],
  "$functions": {
    "trunk_version": {
      "description": "Trunk version number; numbering starts at 1. ",
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/String"
      }
    },
    "is_branch": {
      "description": "True if this version identifier represents a branch, i.e. has branch_number and branch_version parts.",
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/Boolean"
      }
    },
    "branch_number": {
      "description": "Number of branch from the trunk point; numbering starts at 1. ",
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/String"
      }
    },
    "branch_version": {
      "description": "Version of the branch; numbering starts at 1. ",
      "return": {
        "$ref": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json#/definitions/String"
      }
    }
  },
  "$invariants": {
    "Value_valid": "not value.is_empty",
    "Trunk_version_valid": "trunk_version /= Void and then trunk_version.is_integer and then trunk_version.as_integer >= 1",
    "Branch_number_valid": "branch_number /= Void implies branch_number.is_integer and then branch_number.as_integer >= 1",
    "Branch_version_valid": "branch_version /= Void implies branch_version.is_integer and then branch_version.as_integer >= 1",
    "Branch_validity": "(branch_number = Void and branch_version = Void ) xor (branch_number /= Void and branch_version /= Void )",
    "Is_branch_validity": "is_branch xor branch_number = Void",
    "Is_first_validity": "not is_first xor trunk_version.is_equal(\u201c1\u201d)"
  }
}