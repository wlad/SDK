{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Foundation_types/all.json",
  "title": "Foundation_types IM definitions",
  "description": "The openEHR Base types.",
  "$comments": "Part of BASE component, Release-1.1.0 version.",
  "definitions": {
    "Hash": {
      "title": "Hash",
      "description": "Type representing a keyed table of values. V is the value type, and K the type of the keys. ",
      "$comments": "Defined in Foundation_types IM, inherits from Container",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Hash",
            "Hash<String, Hash<String, Hash<String, String>>>",
            "Hash<String, Hash<String, String>>",
            "Hash<String, String>",
            "Hash<String, List<String>>",
            "Hash<String, TRANSLATION_DETAILS>",
            "Hash<String, RESOURCE_DESCRIPTION_ITEM>",
            "Hash<String, ARCHETYPE_TERMINOLOGY>",
            "Hash<String, VALUE_SET>",
            "Hash<String, Hash<String, ARCHETYPE_TERM>>",
            "Hash<String, ARCHETYPE_TERM>",
            "Hash<String, Uri>",
            "Hash <String, Hash<String, Uri>>",
            "Hash<String, AOM_PROPERTY_MAPPING>",
            "Hash<String, AOM_TYPE_MAPPING>"
          ]
        }
      },
      "$inherits": [
        "#/definitions/Container"
      ],
      "$children": [
        "#/definitions/Hash_of_String_Hash_of_String_Hash_of_String_String",
        "#/definitions/Hash_of_String_Hash_of_String_String",
        "#/definitions/Hash_of_String_String",
        "#/definitions/Hash_of_String_List_of_String",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Resource/all.json#/definitions/Hash_of_String_TRANSLATION_DETAILS",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/BASE/Release-1.1.0/Resource/all.json#/definitions/Hash_of_String_RESOURCE_DESCRIPTION_ITEM",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-2.0.6/Aom2/all.json#/definitions/Hash_of_String_ARCHETYPE_TERMINOLOGY",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-2.0.6/Aom2/all.json#/definitions/Hash_of_String_VALUE_SET",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-2.0.6/Aom2/all.json#/definitions/Hash_of_String_Hash_of_String_ARCHETYPE_TERM",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-2.0.6/Aom2/all.json#/definitions/Hash_of_String_ARCHETYPE_TERM",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-2.0.6/Aom2/all.json#/definitions/Hash_of_String_Uri",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-2.0.6/Aom2/all.json#/definitions/Hash_of_String_Hash_of_String_Uri",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-2.0.6/Aom2_profile/all.json#/definitions/Hash_of_String_AOM_PROPERTY_MAPPING",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/AM/Release-2.0.6/Aom2_profile/all.json#/definitions/Hash_of_String_AOM_TYPE_MAPPING"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "has_key": {
          "description": "Test for membership of a key.",
          "parameters": {
            "a_key": {
              "$ref": "#/definitions/K"
            }
          },
          "required_parameters": [
            "a_key"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "item": {
          "description": "Return item for key  a_key'.",
          "parameters": {
            "a_key": {
              "$ref": "#/definitions/K"
            }
          },
          "required_parameters": [
            "a_key"
          ],
          "return": {
            "$ref": "#/definitions/V"
          }
        }
      }
    },
    "Hash<String, Hash<String, Hash<String, String>>>": {
      "title": "Hash<String, Hash<String, Hash<String, String>>>",
      "$comments": "Defined in Foundation_types IM, inherits from Hash",
      "type": "object",
      "$inherits": [
        "#/definitions/Hash"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "has_key": {
          "description": "Test for membership of a key.",
          "parameters": {
            "a_key": {
              "$ref": "#/definitions/K"
            }
          },
          "required_parameters": [
            "a_key"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "item": {
          "description": "Return item for key  a_key'.",
          "parameters": {
            "a_key": {
              "$ref": "#/definitions/K"
            }
          },
          "required_parameters": [
            "a_key"
          ],
          "return": {
            "$ref": "#/definitions/V"
          }
        }
      }
    },
    "Hash<String, Hash<String, String>>": {
      "title": "Hash<String, Hash<String, String>>",
      "description": "Two-level hash map structure, typically used for two levels of keyed tables, e.g. with outer keys = language (\"en\", \"zh\" etc) and inner keys = some tag or id or path.",
      "$comments": "Defined in Foundation_types IM, inherits from Hash",
      "type": "object",
      "$inherits": [
        "#/definitions/Hash"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "has_key": {
          "description": "Test for membership of a key.",
          "parameters": {
            "a_key": {
              "$ref": "#/definitions/K"
            }
          },
          "required_parameters": [
            "a_key"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "item": {
          "description": "Return item for key  a_key'.",
          "parameters": {
            "a_key": {
              "$ref": "#/definitions/K"
            }
          },
          "required_parameters": [
            "a_key"
          ],
          "return": {
            "$ref": "#/definitions/V"
          }
        }
      }
    },
    "Hash<String, String>": {
      "title": "Hash<String, String>",
      "$comments": "Defined in Foundation_types IM, inherits from Hash",
      "type": "object",
      "$inherits": [
        "#/definitions/Hash"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "has_key": {
          "description": "Test for membership of a key.",
          "parameters": {
            "a_key": {
              "$ref": "#/definitions/K"
            }
          },
          "required_parameters": [
            "a_key"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "item": {
          "description": "Return item for key  a_key'.",
          "parameters": {
            "a_key": {
              "$ref": "#/definitions/K"
            }
          },
          "required_parameters": [
            "a_key"
          ],
          "return": {
            "$ref": "#/definitions/V"
          }
        }
      }
    },
    "Container": {
      "title": "Container",
      "description": "Abstract ancestor of container types whose items are addressable in some way.",
      "$comments": "Defined in Foundation_types IM, abstract",
      "type": "array",
      "properties": {
        "_type": {
          "enum": [
            "Hash",
            "List",
            "Set",
            "Array",
            "Hash<String, Hash<String, Hash<String, String>>>",
            "Hash<String, Hash<String, String>>",
            "Hash<String, String>",
            "Hash<String, List<String>>",
            "Hash<String, TRANSLATION_DETAILS>",
            "Hash<String, RESOURCE_DESCRIPTION_ITEM>",
            "Hash<String, ARCHETYPE_TERMINOLOGY>",
            "Hash<String, VALUE_SET>",
            "Hash<String, Hash<String, ARCHETYPE_TERM>>",
            "Hash<String, ARCHETYPE_TERM>",
            "Hash<String, Uri>",
            "Hash <String, Hash<String, Uri>>",
            "Hash<String, AOM_PROPERTY_MAPPING>",
            "Hash<String, AOM_TYPE_MAPPING>",
            "List<String>",
            "Set<String>"
          ]
        }
      },
      "required": [
        "_type"
      ],
      "$abstract": true,
      "$children": [
        "#/definitions/Hash",
        "#/definitions/List",
        "#/definitions/Set",
        "#/definitions/Array"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "List": {
      "title": "List",
      "description": "Ordered container that may contain duplicates.",
      "$comments": "Defined in Foundation_types IM, inherits from Container",
      "type": "array",
      "properties": {
        "_type": {
          "enum": [
            "List",
            "List<String>"
          ]
        }
      },
      "$inherits": [
        "#/definitions/Container"
      ],
      "$children": [
        "#/definitions/List_of_String"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "first": {
          "description": "Return first element.",
          "return": {
            "$ref": "#/definitions/T"
          }
        },
        "last": {
          "description": "Return last element.",
          "return": {
            "$ref": "#/definitions/T"
          }
        }
      },
      "$invariants": {
        "First_validity": "not is_empty implies first /= Void",
        "Last_validity": "not is_empty implies last /= Void"
      }
    },
    "Set": {
      "title": "Set",
      "description": "Unordered container that may not contain duplicates.",
      "$comments": "Defined in Foundation_types IM, inherits from Container",
      "type": "array",
      "properties": {
        "_type": {
          "enum": [
            "Set",
            "Set<String>"
          ]
        }
      },
      "$inherits": [
        "#/definitions/Container"
      ],
      "$children": [
        "#/definitions/Set_of_String"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Array": {
      "title": "Array",
      "description": "Container whose storage is assumed to be contiguous.",
      "$comments": "Defined in Foundation_types IM, inherits from Container",
      "type": "array",
      "$inherits": [
        "#/definitions/Container"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Set<String>": {
      "title": "Set<String>",
      "$comments": "Defined in Foundation_types IM, inherits from Set",
      "type": "array",
      "$inherits": [
        "#/definitions/Set"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "List<String>": {
      "title": "List<String>",
      "$comments": "Defined in Foundation_types IM, inherits from List",
      "type": "array",
      "$inherits": [
        "#/definitions/List"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "first": {
          "description": "Return first element.",
          "return": {
            "$ref": "#/definitions/T"
          }
        },
        "last": {
          "description": "Return last element.",
          "return": {
            "$ref": "#/definitions/T"
          }
        }
      },
      "$invariants": {
        "First_validity": "not is_empty implies first /= Void",
        "Last_validity": "not is_empty implies last /= Void"
      }
    },
    "Hash<String, List<String>>": {
      "title": "Hash<String, List<String>>",
      "$comments": "Defined in Foundation_types IM, inherits from Hash",
      "type": "object",
      "$inherits": [
        "#/definitions/Hash"
      ],
      "$functions": {
        "has": {
          "description": "Test for membership of a value.",
          "parameters": {
            "v": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "v"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "count": {
          "description": "Number of items in container.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "is_empty": {
          "description": "True if container is empty.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "has_key": {
          "description": "Test for membership of a key.",
          "parameters": {
            "a_key": {
              "$ref": "#/definitions/K"
            }
          },
          "required_parameters": [
            "a_key"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "item": {
          "description": "Return item for key  a_key'.",
          "parameters": {
            "a_key": {
              "$ref": "#/definitions/K"
            }
          },
          "required_parameters": [
            "a_key"
          ],
          "return": {
            "$ref": "#/definitions/V"
          }
        }
      }
    },
    "Hash<String, Any>": {
      "title": "Hash<String, Any>",
      "$comments": "Defined in Foundation_types IM",
      "type": "object"
    },
    "Uri": {
      "title": "Uri",
      "$comments": "Defined in Foundation_types IM, inherits from String",
      "type": "string",
      "$inherits": [
        "#/definitions/String"
      ],
      "$functions": {
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix +": {
          "description": "Concatenation operator - causes \u2018other\u2019 to be appended to this string.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/String"
          }
        },
        "is_empty": {
          "description": "True if string is empty, i.e. equal to \"\".",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_integer": {
          "description": "True if string can be parsed as an integer.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "as_integer": {
          "description": "Return the integer corresponding to the integer value represented in this string.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        }
      }
    },
    "Comparable": {
      "title": "Comparable",
      "$comments": "Defined in Foundation_types IM, abstract",
      "$abstract": true
    },
    "Ordered_Numeric": {
      "title": "Ordered_Numeric",
      "description": "Abstract notional parent class of ordered, numeric types, which are types with \u2018<\u2018 and arithmetic operators defined.",
      "$comments": "Defined in Foundation_types IM, abstract, inherits from Ordered, Numeric",
      "type": "number",
      "properties": {
        "_type": {
          "enum": [
            "Integer",
            "Double",
            "Real",
            "Integer64"
          ]
        }
      },
      "required": [
        "_type"
      ],
      "$abstract": true,
      "$inherits": [
        "#/definitions/Ordered",
        "#/definitions/Numeric"
      ],
      "$children": [
        "#/definitions/Integer",
        "#/definitions/Double",
        "#/definitions/Real",
        "#/definitions/Integer64"
      ],
      "$functions": {
        "infix *": {
          "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix +": {
          "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix -": {
          "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Integer": {
      "title": "Integer",
      "description": "Class representing minimal interface of standard Integer type.",
      "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
      "type": "integer",
      "$inherits": [
        "#/definitions/Ordered_Numeric"
      ],
      "$functions": {
        "infix *": {
          "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix +": {
          "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix -": {
          "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Double": {
      "title": "Double",
      "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
      "type": "number",
      "$inherits": [
        "#/definitions/Ordered_Numeric"
      ],
      "$functions": {
        "infix *": {
          "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix +": {
          "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix -": {
          "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Numeric": {
      "title": "Numeric",
      "description": "Abstract notional parent class of numeric types, which are types which have various arithmetic and comparison operators defined.",
      "$comments": "Defined in Foundation_types IM, abstract",
      "type": "number",
      "properties": {
        "_type": {
          "enum": [
            "Integer",
            "Double",
            "Real",
            "Integer64"
          ]
        }
      },
      "required": [
        "_type"
      ],
      "$abstract": true,
      "$children": [
        "#/definitions/Ordered_Numeric"
      ],
      "$functions": {
        "infix *": {
          "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix +": {
          "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix -": {
          "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        }
      }
    },
    "Octet": {
      "title": "Octet",
      "$comments": "Defined in Foundation_types IM, inherits from Ordered",
      "type": "integer",
      "$inherits": [
        "#/definitions/Ordered"
      ],
      "$functions": {
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Character": {
      "title": "Character",
      "$comments": "Defined in Foundation_types IM, inherits from Ordered",
      "type": "string",
      "$inherits": [
        "#/definitions/Ordered"
      ],
      "$functions": {
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Boolean": {
      "title": "Boolean",
      "description": "Class representing minimal interface of standard Boolean type.",
      "$comments": "Defined in Foundation_types IM",
      "type": "boolean",
      "$functions": {
        "infix and": {
          "description": "Logical conjunction",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Boolean"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix and_then": {
          "description": "Boolean semi-strict conjunction with other",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Boolean"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix or": {
          "description": "Boolean disjunction with other.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Boolean"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix or_else": {
          "description": "Boolean semi-strict disjunction with `other'.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Boolean"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix xor": {
          "description": "Boolean exclusive or with `other'.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Boolean"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix implies": {
          "description": "Boolean implication of `other' (semi-strict)",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Boolean"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Involutive_negation": "is_equal (not (not self))",
        "Non_contradiction": "not (self and (not self))",
        "Completeness": "self or else (not self)",
        "Post_de_Morgan": "Result = not (not self and then not other)",
        "Post_commutative": "Result = (other or Current)",
        "Post_consistent_with_semi_strict": "Result implies (self or else other)",
        "Post_definition": "Result = (not self or else other)"
      }
    },
    "String": {
      "title": "String",
      "description": "Strings of characters, as used to represent textual data in any natural or formal language.",
      "$comments": "Defined in Foundation_types IM, inherits from Ordered",
      "type": "string",
      "properties": {
        "_type": {
          "enum": [
            "String",
            "Uri"
          ]
        }
      },
      "$inherits": [
        "#/definitions/Ordered"
      ],
      "$children": [
        "#/definitions/Uri"
      ],
      "$functions": {
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix +": {
          "description": "Concatenation operator - causes \u2018other\u2019 to be appended to this string.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/String"
          }
        },
        "is_empty": {
          "description": "True if string is empty, i.e. equal to \"\".",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_integer": {
          "description": "True if string can be parsed as an integer.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "as_integer": {
          "description": "Return the integer corresponding to the integer value represented in this string.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        }
      }
    },
    "Real": {
      "title": "Real",
      "description": "Type used to represent decimal numbers. Corresponds to a single-precision floating point value in most languages.",
      "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
      "type": "number",
      "$inherits": [
        "#/definitions/Ordered_Numeric"
      ],
      "$functions": {
        "infix *": {
          "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix +": {
          "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix -": {
          "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "floor": {
          "description": "Return the greatest integer no greater than the value of this object.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        }
      }
    },
    "Integer64": {
      "title": "Integer64",
      "description": "Class representing minimal interface of standard Integer64 type.",
      "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
      "type": "integer",
      "$inherits": [
        "#/definitions/Ordered_Numeric"
      ],
      "$functions": {
        "infix *": {
          "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix +": {
          "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix -": {
          "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Numeric"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Numeric"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Ordered": {
      "title": "Ordered",
      "description": "Abstract notional parent class of ordered, types i.e. types on which the \u2018<\u2018 operator is defined.",
      "$comments": "Defined in Foundation_types IM, abstract",
      "properties": {
        "_type": {
          "enum": [
            "Octet",
            "Character",
            "String",
            "Integer",
            "Double",
            "Real",
            "Integer64",
            "Uri",
            "Iso8601_date_time",
            "Iso8601_duration",
            "Iso8601_time",
            "Iso8601_timezone",
            "Iso8601_date",
            "DV_DATE_TIME",
            "DV_DURATION",
            "DV_TIME",
            "DV_DATE",
            "DV_ORDINAL",
            "DV_PROPORTION",
            "DV_QUANTITY",
            "DV_COUNT"
          ]
        }
      },
      "required": [
        "_type"
      ],
      "$abstract": true,
      "$children": [
        "#/definitions/Ordered_Numeric",
        "#/definitions/Octet",
        "#/definitions/Character",
        "#/definitions/String",
        "#/definitions/Temporal",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.4/Data_types/all.json#/definitions/DV_ORDERED"
      ],
      "$functions": {
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Any": {
      "title": "Any",
      "description": "Abstract supertype. Usually maps to a type like Any or Object in an object-oriented technology. Defined here to provide value and reference equality semantics.",
      "$comments": "Defined in Foundation_types IM, abstract",
      "$abstract": true,
      "$functions": {
        "is_equal": {
          "description": "Value equality.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix =": {
          "description": "Reference equality.",
          "parameters": {
            "other": {
              "description": "Reference equality.",
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "instance_of": {
          "description": "Create new instance of a type.",
          "parameters": {
            "a_type": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "a_type"
          ],
          "return": {
            "$ref": "#/definitions/Any"
          }
        },
        "type_of": {
          "description": "Type name of an object as a string. May include generic parameters, as in \"Interval<Time>\".",
          "parameters": {
            "an_object": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "an_object"
          ],
          "return": {
            "$ref": "#/definitions/String"
          }
        }
      }
    },
    "Iso8601_date_time": {
      "title": "Iso8601_date_time",
      "description": "Represents an ISO 8601 date/time, including partial and extended forms. Value may be:\n\n* `YYYY-MM-DDThh:mm:ss[,sss][Z | \u00b1hh[mm]]` (extended, preferred) or\n* `YYYYMMDDThhmmss[,sss][Z | \u00b1hh[mm]]` (compact)\n* or a partial variant.\n\nSee `_valid_iso8601_date_time()_` for validity.\n\nNote that this class includes 2 deviations from ISO 8601:2004:\n\n* for partial date/times, any part of the date/time up to the month may be missing, not just seconds and minutes as in the standard;\n* the time `24:00:00` is not allowed, since it would mean the date was really on the next day.",
      "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Iso8601_date_time",
            "DV_DATE_TIME"
          ]
        },
        "value": {
          "description": "Representation of all descendants is a single String.",
          "$ref": "#/definitions/String"
        }
      },
      "required": [
        "value"
      ],
      "$inherits": [
        "#/definitions/Iso8601_type"
      ],
      "$children": [
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.4/Data_types/all.json#/definitions/DV_DATE_TIME"
      ],
      "$functions": {
        "valid_year": {
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_month": {
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_day": {
          "description": "True if d >= 1 and d <= days_in_month (m, y)",
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "d": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y",
            "m",
            "d"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_hour": {
          "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)",
          "parameters": {
            "h": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "h",
            "m",
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_minute": {
          "description": "True if m >= 0 and m < Minutes_in_hour.",
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_second": {
          "description": "True if s >= 0 and s < Seconds_in_minute .",
          "parameters": {
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_fractional_second": {
          "description": "True if fs >= 0.0 and fs < 1.0 .",
          "parameters": {
            "fs": {
              "$ref": "#/definitions/Double"
            }
          },
          "required_parameters": [
            "fs"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date": {
          "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_time": {
          "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date_time": {
          "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_duration": {
          "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
          "parameters": {
            "s": {
              "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_partial": {
          "description": "True if this date time is partial, i.e. if seconds or more is missing.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_extended": {
          "description": "True if this date/time uses \u2018-\u2019, \u2018:\u2019 separators.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "year": {
          "description": "Year.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "month": {
          "description": "Month in year.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "day": {
          "description": "Day in month.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "hour": {
          "description": "Hour in day.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "minute": {
          "description": "Minute in hour.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "second": {
          "description": "Second in minute.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "fractional_second": {
          "description": "Fractional seconds.",
          "return": {
            "$ref": "#/definitions/Real"
          }
        },
        "timezone": {
          "description": "Timezone; may be Void.",
          "return": {
            "$ref": "#/definitions/Iso8601_timezone"
          }
        },
        "month_unknown": {
          "description": "Indicates whether month in year is unknown.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "day_unknown": {
          "description": "Indicates whether day in month is unknown.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "minute_unknown": {
          "description": "Indicates whether minute in hour is known.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "second_unknown": {
          "description": "Indicates whether minute in hour is known.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_decimal_sign_comma": {
          "description": "True if this time has a decimal part indicated by \u2018,\u2019 (comma) rather than \u2018.\u2019 (period).",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "has_fractional_second": {
          "description": "True if the fractional_second part is signficant (i.e. even if = 0.0).",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "as_string": {
          "description": "Return the string value in extended format.",
          "return": {
            "$ref": "#/definitions/String"
          }
        }
      },
      "$invariants": {
        "Post": "Result = fs >= 0.0 and fs < 1.0 .",
        "Year_valid": "valid_year (year)",
        "Month_valid": "valid_month (month)",
        "Day_valid": "valid_day(year, month, day)",
        "Hour_valid": "valid_hour (hour, minute, second)",
        "Minute_valid": "not minute_unknown implies valid_minute(minute)",
        "Second_valid": "not second_unknown implies valid_second (second)",
        "Fractional_second_valid": "has_fractional_second implies (not second_unknown and valid_fractional_second (fractional_second))",
        "Partial_validity_year": "not month_unknown",
        "Partial_validity_month": "not month_unknown",
        "Partial_validity_day": "not day_unknown",
        "Partial_validity_hour": "not hour_unknown",
        "Partial_validity_minute": "minute_unknown implies second_unknown",
        "Pre": "not second_unknown"
      }
    },
    "Iso8601_duration": {
      "title": "Iso8601_duration",
      "description": "Represents an ISO 8601 duration, which may have multiple parts from years down to seconds. Value is in format:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`",
      "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Iso8601_duration",
            "DV_DURATION"
          ]
        },
        "value": {
          "description": "Representation of all descendants is a single String.",
          "$ref": "#/definitions/String"
        }
      },
      "required": [
        "value"
      ],
      "$inherits": [
        "#/definitions/Iso8601_type"
      ],
      "$children": [
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.4/Data_types/all.json#/definitions/DV_DURATION"
      ],
      "$functions": {
        "valid_year": {
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_month": {
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_day": {
          "description": "True if d >= 1 and d <= days_in_month (m, y)",
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "d": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y",
            "m",
            "d"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_hour": {
          "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)",
          "parameters": {
            "h": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "h",
            "m",
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_minute": {
          "description": "True if m >= 0 and m < Minutes_in_hour.",
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_second": {
          "description": "True if s >= 0 and s < Seconds_in_minute .",
          "parameters": {
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_fractional_second": {
          "description": "True if fs >= 0.0 and fs < 1.0 .",
          "parameters": {
            "fs": {
              "$ref": "#/definitions/Double"
            }
          },
          "required_parameters": [
            "fs"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date": {
          "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_time": {
          "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date_time": {
          "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_duration": {
          "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
          "parameters": {
            "s": {
              "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_partial": {
          "description": "Returns False.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_extended": {
          "description": "Returns True.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "seconds": {
          "description": "Number of seconds.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "fractional_seconds": {
          "description": "Fractional seconds.",
          "return": {
            "$ref": "#/definitions/Real"
          }
        },
        "is_decimal_sign_comma": {
          "description": "True if this time has a decimal part indicated by ',' (comma) rather than '.' (period).",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "months": {
          "description": "Number of months.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "years": {
          "description": "Number of years of nominal 365-day length.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "weeks": {
          "description": "Number of 7 day weeks.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "to_seconds": {
          "description": "Total number of seconds equivalent (including fractional) of entire duration.",
          "return": {
            "$ref": "#/definitions/Real"
          }
        },
        "minutes": {
          "description": "Number of 60 second minutes.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "hours": {
          "description": "Number of 60 minute hours.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "days": {
          "description": "Number of 24 hour days.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "as_string": {
          "description": "Return the duration string value.",
          "return": {
            "$ref": "#/definitions/String"
          }
        }
      },
      "$invariants": {
        "Post": "Result = fs >= 0.0 and fs < 1.0 .",
        "Years_valid": "years >= 0",
        "Months_valid": "months >= 0",
        "Weeks_valid": "weeks >= 0",
        "Days_valid": "days >= 0",
        "Hours_valid": "hours >= 0",
        "Minutes_valid": "minutes >= 0",
        "Seconds_valid": "seconds >= 0",
        "Fractional_second_valid": "fractional_second >= 0.0 and fractional_second < 1.0"
      }
    },
    "Iso8601_time": {
      "title": "Iso8601_time",
      "description": "Represents an ISO 8601 time, including partial and extended forms. Value may be:\n\n* `hh:mm:ss[,sss][Z|\u00b1hh[mm]]` (extended, preferred) or\n* `hhmmss[,sss][Z|\u00b1hh[mm]]` (compact)\n* or a partial invariant.\n\nSee `_valid_iso8601_time()_` for validity.\n\nNOTE: A small deviation to the ISO 8601:2004 standard in this class is that the time `24:00:00` is not allowed, for consistency with `Iso8601_date_time`.",
      "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Iso8601_time",
            "DV_TIME"
          ]
        },
        "value": {
          "description": "Representation of all descendants is a single String.",
          "$ref": "#/definitions/String"
        }
      },
      "required": [
        "value"
      ],
      "$inherits": [
        "#/definitions/Iso8601_type"
      ],
      "$children": [
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.4/Data_types/all.json#/definitions/DV_TIME"
      ],
      "$functions": {
        "valid_year": {
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_month": {
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_day": {
          "description": "True if d >= 1 and d <= days_in_month (m, y)",
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "d": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y",
            "m",
            "d"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_hour": {
          "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)",
          "parameters": {
            "h": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "h",
            "m",
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_minute": {
          "description": "True if m >= 0 and m < Minutes_in_hour.",
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_second": {
          "description": "True if s >= 0 and s < Seconds_in_minute .",
          "parameters": {
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_fractional_second": {
          "description": "True if fs >= 0.0 and fs < 1.0 .",
          "parameters": {
            "fs": {
              "$ref": "#/definitions/Double"
            }
          },
          "required_parameters": [
            "fs"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date": {
          "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_time": {
          "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date_time": {
          "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_duration": {
          "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
          "parameters": {
            "s": {
              "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_partial": {
          "description": "True if this time is partial, i.e. if seconds or more is missing.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_extended": {
          "description": "True if this time uses \u2018-\u2019, \u2018:\u2019 separators.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "hour": {
          "description": "Hour in day, in 24-hour time.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "minute": {
          "description": "Minute in hour.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "second": {
          "description": "Second in minute.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "fractional_second": {
          "description": "Fractional seconds.",
          "return": {
            "$ref": "#/definitions/Real"
          }
        },
        "timezone": {
          "description": "Timezone; may be Void.",
          "return": {
            "$ref": "#/definitions/Iso8601_timezone"
          }
        },
        "minute_unknown": {
          "description": "Indicates whether minute is unknown. If so, the time is of the form \u201chh\u201d.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "second_unknown": {
          "description": "Indicates whether second is unknown. If so and month is known, the time is of the form `\"hh:mm\"` or `\"hhmm\"`.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_decimal_sign_comma": {
          "description": "True if this time has a decimal part indicated by \u2018,\u2019 (comma) rather than \u2018.\u2019 (period).",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "has_fractional_second": {
          "description": "True if the fractional_second part is signficant (i.e. even if = 0.0).",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "as_string": {
          "description": "Return string value in extended format.",
          "return": {
            "$ref": "#/definitions/String"
          }
        }
      },
      "$invariants": {
        "Post": "Result = fs >= 0.0 and fs < 1.0 .",
        "Hour_valid": "valid_hour(hour, minute, second)",
        "Minute_valid": "not minute_unknown implies valid_minute (minute)",
        "Second_valid": "not second_unknown implies valid_second (second)",
        "Fractional_second_valid": "has_fractional_second implies (not second_unknown and valid_fractional_second (fractional_second))",
        "Partial_validity": "minute_unknown implies second_unknown",
        "Pre": "not second_unknown"
      }
    },
    "Iso8601_timezone": {
      "title": "Iso8601_timezone",
      "description": "ISO8601 timezone string, in format:\n\n* `Z | \u00b1hh[mm]`\n\nwhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
      "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
      "type": "object",
      "properties": {
        "value": {
          "description": "Representation of all descendants is a single String.",
          "$ref": "#/definitions/String"
        }
      },
      "required": [
        "value"
      ],
      "$inherits": [
        "#/definitions/Iso8601_type"
      ],
      "$functions": {
        "valid_year": {
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_month": {
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_day": {
          "description": "True if d >= 1 and d <= days_in_month (m, y)",
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "d": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y",
            "m",
            "d"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_hour": {
          "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)",
          "parameters": {
            "h": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "h",
            "m",
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_minute": {
          "description": "True if m >= 0 and m < Minutes_in_hour.",
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_second": {
          "description": "True if s >= 0 and s < Seconds_in_minute .",
          "parameters": {
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_fractional_second": {
          "description": "True if fs >= 0.0 and fs < 1.0 .",
          "parameters": {
            "fs": {
              "$ref": "#/definitions/Double"
            }
          },
          "required_parameters": [
            "fs"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date": {
          "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_time": {
          "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date_time": {
          "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_duration": {
          "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
          "parameters": {
            "s": {
              "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_partial": {
          "description": "True if this time zone is partial, i.e. if minutes is missing.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_extended": {
          "description": "True if this time-zone uses \u2018:\u2019 separators.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "hour": {
          "description": "Hour part of timezone - in the range 00 - 13.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "minute": {
          "description": "Minute part of timezone. Generally 00 or 30.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "sign": {
          "description": "Direction of timezone expresssed as +1 or -1.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "minute_unknown": {
          "description": "Indicates whether minute part known.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_gmt": {
          "description": "True if timezone is UTC, i.e. +0000.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "as_string": {
          "description": "Return timezone string.",
          "return": {
            "$ref": "#/definitions/String"
          }
        }
      },
      "$invariants": {
        "Post": "Result = fs >= 0.0 and fs < 1.0 .",
        "Min_hour_valid": "sign = -1 implies hour > 0 and hour <= Min_timezone_hour",
        "Max_hour_valid": "sign = 1 implies hour > 0 and hour <= Max_timezone_hour",
        "Minute_valid": "not minute_unknown implies valid_minute (minute)",
        "Sign_valid": "sign = 1 or sign = -1"
      }
    },
    "Iso8601_type": {
      "title": "Iso8601_type",
      "description": "Abstract ancestor type of ISO 8601 types, defining interface for 'extended' and 'partial' concepts from ISO 8601.",
      "$comments": "Defined in Foundation_types IM, abstract, inherits from Temporal, Time_Definitions",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Iso8601_date_time",
            "Iso8601_duration",
            "Iso8601_time",
            "Iso8601_timezone",
            "Iso8601_date",
            "DV_DATE_TIME",
            "DV_DURATION",
            "DV_TIME",
            "DV_DATE"
          ]
        },
        "value": {
          "description": "Representation of all descendants is a single String.",
          "$ref": "#/definitions/String"
        }
      },
      "required": [
        "_type",
        "value"
      ],
      "$abstract": true,
      "$inherits": [
        "#/definitions/Temporal",
        "#/definitions/Time_Definitions"
      ],
      "$children": [
        "#/definitions/Iso8601_date_time",
        "#/definitions/Iso8601_duration",
        "#/definitions/Iso8601_time",
        "#/definitions/Iso8601_timezone",
        "#/definitions/Iso8601_date"
      ],
      "$functions": {
        "valid_year": {
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_month": {
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_day": {
          "description": "True if d >= 1 and d <= days_in_month (m, y)",
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "d": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y",
            "m",
            "d"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_hour": {
          "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)",
          "parameters": {
            "h": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "h",
            "m",
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_minute": {
          "description": "True if m >= 0 and m < Minutes_in_hour.",
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_second": {
          "description": "True if s >= 0 and s < Seconds_in_minute .",
          "parameters": {
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_fractional_second": {
          "description": "True if fs >= 0.0 and fs < 1.0 .",
          "parameters": {
            "fs": {
              "$ref": "#/definitions/Double"
            }
          },
          "required_parameters": [
            "fs"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date": {
          "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_time": {
          "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date_time": {
          "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_duration": {
          "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
          "parameters": {
            "s": {
              "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_partial": {
          "description": "True if this date time is partial, i.e. if trailing end (right hand) value(s) is/are missing.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_extended": {
          "description": "True if this ISO8601 string is in the 'extended' form, i.e. uses \u2018-\u2019 and / or \u2018:\u2019 separators. This is the preferred format.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Post": "Result = fs >= 0.0 and fs < 1.0 ."
      }
    },
    "Iso8601_date": {
      "title": "Iso8601_date",
      "description": "Represents an ISO 8601 date, including partial and extended forms. Value may be:\n\n* `YYYY-MM-DD` (extended, preferred)\n* `YYYYMMDD` (compactd)\n* a partial invariant.\n\nSee `Time_definitions._valid_iso8601_date()_` for validity.",
      "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Iso8601_date",
            "DV_DATE"
          ]
        },
        "value": {
          "description": "Representation of all descendants is a single String.",
          "$ref": "#/definitions/String"
        }
      },
      "required": [
        "value"
      ],
      "$inherits": [
        "#/definitions/Iso8601_type"
      ],
      "$children": [
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.4/Data_types/all.json#/definitions/DV_DATE"
      ],
      "$functions": {
        "valid_year": {
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_month": {
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_day": {
          "description": "True if d >= 1 and d <= days_in_month (m, y)",
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "d": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y",
            "m",
            "d"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_hour": {
          "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)",
          "parameters": {
            "h": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "h",
            "m",
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_minute": {
          "description": "True if m >= 0 and m < Minutes_in_hour.",
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_second": {
          "description": "True if s >= 0 and s < Seconds_in_minute .",
          "parameters": {
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_fractional_second": {
          "description": "True if fs >= 0.0 and fs < 1.0 .",
          "parameters": {
            "fs": {
              "$ref": "#/definitions/Double"
            }
          },
          "required_parameters": [
            "fs"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date": {
          "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_time": {
          "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date_time": {
          "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_duration": {
          "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
          "parameters": {
            "s": {
              "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_partial": {
          "description": "True if this date is partial, i.e. if days or more is missing.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_extended": {
          "description": "True if this date uses `'-'` separators.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "year": {
          "description": "Year.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "month": {
          "description": "Month in year.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "day": {
          "description": "Day in month.",
          "return": {
            "$ref": "#/definitions/Integer"
          }
        },
        "timezone": {
          "description": "Timezone; may be Void.",
          "return": {
            "$ref": "#/definitions/Iso8601_timezone"
          }
        },
        "month_unknown": {
          "description": "Indicates whether month in year is unknown. If so, the date is of the form `\"YYYY\"`.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "day_unknown": {
          "description": "Indicates whether day in month is unknown. If so, and month is known, the date is of the form `\"YYYY-MM\"` or `\"YYYYMM\"`.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "as_string": {
          "description": "Return string value in extended format.",
          "return": {
            "$ref": "#/definitions/String"
          }
        }
      },
      "$invariants": {
        "Post": "Result = fs >= 0.0 and fs < 1.0 .",
        "Year_valid": "valid_year (year)",
        "Month_valid": "not month_unknown implies valid_month (month)",
        "Day_valid": "not day_unknown implies valid_day (year, month, day)",
        "Partial_validity": "month_unknown implies day_unknown",
        "Pre": "not day_unknown"
      }
    },
    "Interval<Iso8601_date>": {
      "title": "Interval<Iso8601_date>",
      "$comments": "Defined in Foundation_types IM, inherits from Interval",
      "type": "object",
      "properties": {
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/Iso8601_date"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/Iso8601_date"
        },
        "lower_unbounded": {
          "description": "`lower` boundary open (i.e. = -infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "upper_unbounded": {
          "description": "`upper` boundary open (i.e. = +infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "lower_included": {
          "description": "`lower` boundary value included in range if not `lower_unbounded`.",
          "$ref": "#/definitions/Boolean"
        },
        "upper_included": {
          "description": "`upper` boundary value included in range if not `upper_unbounded`.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Interval"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
      }
    },
    "Proper_interval<Iso8601_date>": {
      "title": "Proper_interval<Iso8601_date>",
      "$comments": "Defined in Foundation_types IM, inherits from Proper_interval",
      "type": "object",
      "properties": {
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/Iso8601_date"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/Iso8601_date"
        },
        "lower_unbounded": {
          "description": "`lower` boundary open (i.e. = -infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "upper_unbounded": {
          "description": "`upper` boundary open (i.e. = +infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "lower_included": {
          "description": "`lower` boundary value included in range if not `lower_unbounded`.",
          "$ref": "#/definitions/Boolean"
        },
        "upper_included": {
          "description": "`upper` boundary value included in range if not `upper_unbounded`.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Proper_interval"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
        "Inv_not_point": "lower /= upper"
      }
    },
    "Point_interval<Iso8601_date>": {
      "title": "Point_interval<Iso8601_date>",
      "$comments": "Defined in Foundation_types IM, inherits from Point_interval",
      "type": "object",
      "properties": {
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/Iso8601_date"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/Iso8601_date"
        },
        "lower_unbounded": {
          "description": "lower boundary open (i.e. = -infinity)",
          "$ref": "#/definitions/Boolean",
          "default": false
        },
        "upper_unbounded": {
          "description": "upper boundary open (i.e. = +infinity)",
          "$ref": "#/definitions/Boolean",
          "default": false
        },
        "lower_included": {
          "description": "lower boundary value included in range if not lower_unbounded.",
          "$ref": "#/definitions/Boolean",
          "default": true
        },
        "upper_included": {
          "description": "upper boundary value included in range if not upper_unbounded.",
          "$ref": "#/definitions/Boolean",
          "default": true
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Point_interval"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
        "Inv_point": "lower = upper"
      }
    },
    "Interval<Iso8601_time>": {
      "title": "Interval<Iso8601_time>",
      "$comments": "Defined in Foundation_types IM, inherits from Interval",
      "type": "object",
      "properties": {
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/Iso8601_time"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/Iso8601_time"
        },
        "lower_unbounded": {
          "description": "`lower` boundary open (i.e. = -infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "upper_unbounded": {
          "description": "`upper` boundary open (i.e. = +infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "lower_included": {
          "description": "`lower` boundary value included in range if not `lower_unbounded`.",
          "$ref": "#/definitions/Boolean"
        },
        "upper_included": {
          "description": "`upper` boundary value included in range if not `upper_unbounded`.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Interval"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
      }
    },
    "Interval<Iso8601_date_time>": {
      "title": "Interval<Iso8601_date_time>",
      "$comments": "Defined in Foundation_types IM, inherits from Interval",
      "type": "object",
      "properties": {
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/Iso8601_date_time"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/Iso8601_date_time"
        },
        "lower_unbounded": {
          "description": "`lower` boundary open (i.e. = -infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "upper_unbounded": {
          "description": "`upper` boundary open (i.e. = +infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "lower_included": {
          "description": "`lower` boundary value included in range if not `lower_unbounded`.",
          "$ref": "#/definitions/Boolean"
        },
        "upper_included": {
          "description": "`upper` boundary value included in range if not `upper_unbounded`.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Interval"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
      }
    },
    "Interval<Iso8601_duration>": {
      "title": "Interval<Iso8601_duration>",
      "$comments": "Defined in Foundation_types IM, inherits from Interval",
      "type": "object",
      "properties": {
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/Iso8601_duration"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/Iso8601_duration"
        },
        "lower_unbounded": {
          "description": "`lower` boundary open (i.e. = -infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "upper_unbounded": {
          "description": "`upper` boundary open (i.e. = +infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "lower_included": {
          "description": "`lower` boundary value included in range if not `lower_unbounded`.",
          "$ref": "#/definitions/Boolean"
        },
        "upper_included": {
          "description": "`upper` boundary value included in range if not `upper_unbounded`.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Interval"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
      }
    },
    "Time_Definitions": {
      "title": "Time_Definitions",
      "description": "Definitions for date/time classes. Note that the timezone limits are set by where the international dateline is. Thus, time in New Zealand is quoted using `+12:00`, not `-12:00`.",
      "$comments": "Defined in Foundation_types IM",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Time_Definitions",
            "Iso8601_date_time",
            "Iso8601_duration",
            "Iso8601_time",
            "Iso8601_timezone",
            "Iso8601_date",
            "DV_DATE_TIME",
            "DV_DURATION",
            "DV_TIME",
            "DV_DATE"
          ]
        }
      },
      "$children": [
        "#/definitions/Iso8601_type"
      ],
      "$functions": {
        "valid_year": {
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_month": {
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_day": {
          "description": "True if d >= 1 and d <= days_in_month (m, y)",
          "parameters": {
            "y": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "d": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "y",
            "m",
            "d"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_hour": {
          "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)",
          "parameters": {
            "h": {
              "$ref": "#/definitions/Integer"
            },
            "m": {
              "$ref": "#/definitions/Integer"
            },
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "h",
            "m",
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_minute": {
          "description": "True if m >= 0 and m < Minutes_in_hour.",
          "parameters": {
            "m": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "m"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_second": {
          "description": "True if s >= 0 and s < Seconds_in_minute .",
          "parameters": {
            "s": {
              "$ref": "#/definitions/Integer"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_fractional_second": {
          "description": "True if fs >= 0.0 and fs < 1.0 .",
          "parameters": {
            "fs": {
              "$ref": "#/definitions/Double"
            }
          },
          "required_parameters": [
            "fs"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date": {
          "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar.",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_time": {
          "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_date_time": {
          "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)",
          "parameters": {
            "s": {
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "valid_iso8601_duration": {
          "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
          "parameters": {
            "s": {
              "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each `nn` represents a number of years, months, etc. `nnW` represents a number of 7- day weeks.\n\nNOTE: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration).",
              "$ref": "#/definitions/String"
            }
          },
          "required_parameters": [
            "s"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Post": "Result = fs >= 0.0 and fs < 1.0 ."
      }
    },
    "Temporal": {
      "title": "Temporal",
      "description": "Abstract ancestor of time-related classes.",
      "$comments": "Defined in Foundation_types IM, abstract, inherits from Ordered",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Iso8601_date_time",
            "Iso8601_duration",
            "Iso8601_time",
            "Iso8601_timezone",
            "Iso8601_date",
            "DV_DATE_TIME",
            "DV_DURATION",
            "DV_TIME",
            "DV_DATE"
          ]
        }
      },
      "required": [
        "_type"
      ],
      "$abstract": true,
      "$inherits": [
        "#/definitions/Ordered"
      ],
      "$children": [
        "#/definitions/Iso8601_type"
      ],
      "$functions": {
        "infix <": {
          "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Ordered"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Multiplicity_interval": {
      "title": "Multiplicity_interval",
      "description": "An Interval of Integer, used to represent multiplicity, cardinality and optionality in models. ",
      "$comments": "Defined in Foundation_types IM, inherits from Proper_interval",
      "type": "object",
      "properties": {
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/Integer"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/Integer"
        },
        "lower_unbounded": {
          "description": "`lower` boundary open (i.e. = -infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "upper_unbounded": {
          "description": "`upper` boundary open (i.e. = +infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "lower_included": {
          "description": "`lower` boundary value included in range if not `lower_unbounded`.",
          "$ref": "#/definitions/Boolean"
        },
        "upper_included": {
          "description": "`upper` boundary value included in range if not `upper_unbounded`.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Proper_interval"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_open": {
          "description": "True if this interval imposes no constraints, i.e. is set to `0..*`.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_optional": {
          "description": "True if this interval expresses optionality, i.e. `0..1`.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_mandatory": {
          "description": "True if this interval expresses mandation, i.e. `1..1`.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_prohibited": {
          "description": "True if this interval is set to `0..0`.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
        "Inv_not_point": "lower /= upper"
      }
    },
    "Proper_interval": {
      "title": "Proper_interval",
      "description": "Type representing a 'proper' Interval, i.e. any two-sided or one-sided interval.",
      "$comments": "Defined in Foundation_types IM, inherits from Interval",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Proper_interval",
            "Proper_interval<Iso8601_date>",
            "Multiplicity_interval"
          ]
        },
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/T"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/T"
        },
        "lower_unbounded": {
          "description": "`lower` boundary open (i.e. = -infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "upper_unbounded": {
          "description": "`upper` boundary open (i.e. = +infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "lower_included": {
          "description": "`lower` boundary value included in range if not `lower_unbounded`.",
          "$ref": "#/definitions/Boolean"
        },
        "upper_included": {
          "description": "`upper` boundary value included in range if not `upper_unbounded`.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Interval"
      ],
      "$children": [
        "#/definitions/Proper_interval_of_Iso8601_date",
        "#/definitions/Multiplicity_interval"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
        "Inv_not_point": "lower /= upper"
      }
    },
    "Interval": {
      "title": "Interval",
      "description": "Interval abstraction, featuring upper and lower limits that may be open or closed, included or not included.",
      "$comments": "Defined in Foundation_types IM",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Interval",
            "Interval<Iso8601_date>",
            "Interval<Iso8601_time>",
            "Interval<Iso8601_date_time>",
            "Interval<Iso8601_duration>",
            "Proper_interval",
            "Point_interval",
            "Interval<Real>",
            "Interval<Integer>",
            "DV_INTERVAL",
            "Proper_interval<Iso8601_date>",
            "Multiplicity_interval",
            "Point_interval<Iso8601_date>",
            "DV_INTERVAL<DV_DATE_TIME>",
            "DV_INTERVAL<DV_DATE>",
            "DV_INTERVAL<DV_QUANTITY>",
            "DV_INTERVAL<DV_COUNT>",
            "DV_INTERVAL<DV_PROPORTION>"
          ]
        },
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/T"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/T"
        },
        "lower_unbounded": {
          "description": "`lower` boundary open (i.e. = -infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "upper_unbounded": {
          "description": "`upper` boundary open (i.e. = +infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "lower_included": {
          "description": "`lower` boundary value included in range if not `lower_unbounded`.",
          "$ref": "#/definitions/Boolean"
        },
        "upper_included": {
          "description": "`upper` boundary value included in range if not `upper_unbounded`.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$children": [
        "#/definitions/Interval_of_Iso8601_date",
        "#/definitions/Interval_of_Iso8601_time",
        "#/definitions/Interval_of_Iso8601_date_time",
        "#/definitions/Interval_of_Iso8601_duration",
        "#/definitions/Proper_interval",
        "#/definitions/Point_interval",
        "#/definitions/Interval_of_Real",
        "#/definitions/Interval_of_Integer",
        "https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.4/Data_types/all.json#/definitions/DV_INTERVAL"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
      }
    },
    "Point_interval": {
      "title": "Point_interval",
      "description": "Type representing an Interval that happens to be a point value. Provides an efficient representation that is substitutable for `Interval<T>` where needed.",
      "$comments": "Defined in Foundation_types IM, inherits from Interval",
      "type": "object",
      "properties": {
        "_type": {
          "enum": [
            "Point_interval",
            "Point_interval<Iso8601_date>"
          ]
        },
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/T"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/T"
        },
        "lower_unbounded": {
          "description": "lower boundary open (i.e. = -infinity)",
          "$ref": "#/definitions/Boolean",
          "default": false
        },
        "upper_unbounded": {
          "description": "upper boundary open (i.e. = +infinity)",
          "$ref": "#/definitions/Boolean",
          "default": false
        },
        "lower_included": {
          "description": "lower boundary value included in range if not lower_unbounded.",
          "$ref": "#/definitions/Boolean",
          "default": true
        },
        "upper_included": {
          "description": "upper boundary value included in range if not upper_unbounded.",
          "$ref": "#/definitions/Boolean",
          "default": true
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Interval"
      ],
      "$children": [
        "#/definitions/Point_interval_of_Iso8601_date"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)",
        "Inv_point": "lower = upper"
      }
    },
    "Cardinality": {
      "title": "Cardinality",
      "description": "Express constraints on the cardinality of container objects which are the values of multiply-valued attributes, including uniqueness and ordering, providing the means to state that a container acts like a logical list, set or bag.",
      "$comments": "Defined in Foundation_types IM",
      "type": "object",
      "properties": {
        "interval": {
          "description": "The interval of this cardinality. ",
          "$ref": "#/definitions/Multiplicity_interval"
        },
        "is_ordered": {
          "description": "True if the members of the container attribute to which this cardinality refers are ordered. ",
          "$ref": "#/definitions/Boolean"
        },
        "is_unique": {
          "description": "True if the members of the container attribute to which this cardinality refers are unique.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "interval",
        "is_ordered",
        "is_unique"
      ],
      "$functions": {
        "is_bag": {
          "description": "True if the semantics of this cardinality represent a bag, i.e. unordered, non-unique membership.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_list": {
          "description": "True if the semantics of this cardinality represent a list, i.e. ordered, non-unique membership.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_set": {
          "description": "True if the semantics of this cardinality represent a set, i.e. unordered, unique membership.",
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      }
    },
    "Interval<Real>": {
      "title": "Interval<Real>",
      "$comments": "Defined in Foundation_types IM, inherits from Interval",
      "type": "object",
      "properties": {
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/Real"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/Real"
        },
        "lower_unbounded": {
          "description": "`lower` boundary open (i.e. = -infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "upper_unbounded": {
          "description": "`upper` boundary open (i.e. = +infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "lower_included": {
          "description": "`lower` boundary value included in range if not `lower_unbounded`.",
          "$ref": "#/definitions/Boolean"
        },
        "upper_included": {
          "description": "`upper` boundary value included in range if not `upper_unbounded`.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Interval"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
      }
    },
    "Interval<Integer>": {
      "title": "Interval<Integer>",
      "$comments": "Defined in Foundation_types IM, inherits from Interval",
      "type": "object",
      "properties": {
        "lower": {
          "description": "Lower bound.",
          "$ref": "#/definitions/Integer"
        },
        "upper": {
          "description": "Upper bound.",
          "$ref": "#/definitions/Integer"
        },
        "lower_unbounded": {
          "description": "`lower` boundary open (i.e. = -infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "upper_unbounded": {
          "description": "`upper` boundary open (i.e. = +infinity).",
          "$ref": "#/definitions/Boolean"
        },
        "lower_included": {
          "description": "`lower` boundary value included in range if not `lower_unbounded`.",
          "$ref": "#/definitions/Boolean"
        },
        "upper_included": {
          "description": "`upper` boundary value included in range if not `upper_unbounded`.",
          "$ref": "#/definitions/Boolean"
        }
      },
      "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
      ],
      "$inherits": [
        "#/definitions/Interval"
      ],
      "$functions": {
        "has": {
          "description": "True if `(lower_unbounded or lower_included and v >= lower) or v > lower and (upper_unbounded or upper_included and v <= upper or v < upper)`.",
          "parameters": {
            "e": {
              "$ref": "#/definitions/T"
            }
          },
          "required_parameters": [
            "e"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "intersects": {
          "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "contains": {
          "description": "True if current interval properly contains `other`? True if all points of `other` are inside the current interval.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Interval"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        },
        "is_equal": {
          "description": "True if current object's interval is semantically same as `other`.",
          "parameters": {
            "other": {
              "$ref": "#/definitions/Any"
            }
          },
          "required_parameters": [
            "other"
          ],
          "return": {
            "$ref": "#/definitions/Boolean"
          }
        }
      },
      "$invariants": {
        "Lower_included_valid": "lower_unbounded implies not lower_included",
        "Upper_included_valid": "upper_unbounded implies not upper_included",
        "Limits_consistent": "(not upper_unbounded and not lower_unbounded) implies lower <= upper",
        "Limits_comparable": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
      }
    },
    "Terminology_code": {
      "title": "Terminology_code",
      "description": "Logically primitive type representing a reference to a terminology concept, in the form of a terminology identifier, optional version, and a code or code string from the terminology.",
      "$comments": "Defined in Foundation_types IM",
      "type": "object",
      "properties": {
        "terminology_id": {
          "description": "The archetype environment namespace identifier used to identify a terminology. Typically a value like `\"snomed_ct\"` that is mapped elsewhere to the full URI identifying the terminology.",
          "$ref": "#/definitions/String"
        },
        "terminology_version": {
          "description": "Optional string value representing terminology version, typically a date or dotted numeric.",
          "$ref": "#/definitions/String"
        },
        "code_string": {
          "description": "A terminology code or post-coordinated code expression, if supported by the terminology. The code may refer to a single term, a value set consisting of multiple terms, or some other entity representable within the terminology.",
          "$ref": "#/definitions/String"
        },
        "uri": {
          "description": "The URI reference that may be used as a concrete key into a notional terminology service for queries that can obtain the term text, definition, and other associated elements.",
          "$ref": "#/definitions/Uri"
        }
      },
      "required": [
        "terminology_id",
        "code_string"
      ]
    },
    "Terminology_term": {
      "title": "Terminology_term",
      "description": "Leaf type representing a term from a terminology, which consists of the term text and the code, i.e. a concept reference.",
      "$comments": "Defined in Foundation_types IM",
      "type": "object",
      "properties": {
        "concept": {
          "description": "Refrence to the terminology concept formally representing this term.",
          "$ref": "#/definitions/Terminology_code"
        },
        "text": {
          "description": "Text of term.",
          "$ref": "#/definitions/String"
        }
      },
      "required": [
        "concept",
        "text"
      ]
    },
    "T": {
      "title": "T",
      "description": "Type used by generic parameters.",
      "$comments": "Defined in Foundation_types IM, abstract",
      "$abstract": true
    },
    "K": {
      "title": "K",
      "description": "Type used by generic parameters.",
      "$comments": "Defined in Foundation_types IM, abstract",
      "$abstract": true
    },
    "V": {
      "title": "V",
      "description": "Type used by generic parameters.",
      "$comments": "Defined in Foundation_types IM, abstract",
      "$abstract": true
    }
  },
  "$component": "BASE",
  "$version": "Release-1.1.0"
}